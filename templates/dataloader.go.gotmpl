{{- /*
Accept data:
    Key: type without import path, can be slice or pointer.
    KeyImport: key type import path,.
    Value: type without import path, can be slice or pointer.
    ValueImport: value type import path,.
*/ -}}

{{- $key := .Key }}
{{- $value := .Value}}
{{- $isSlice := hasPrefix "[]" $value }}
{{- if $isSlice }}
{{- $value = substr 2 -1 $value }}
{{- end }}
{{- $isPointer := hasPrefix "*" $value }}
{{- if $isPointer }}
{{- $value = substr 1 -1 $value }}
{{- end }}
{{- if .KeyImport }} 
{{- $key = printf "pkg1.%s" $key }}
{{- end }}
{{- if .ValueImport }} 
{{- $value = printf "pkg2.%s" $value }}
{{- end }}
{{- if $isPointer }}
{{- $value = printf "*%s" $value }}
{{- end }}
{{- if $isSlice }}
{{- $value = printf "[]%s" $value }}
{{- end -}}

// Code generated from {{ templateFiles }}, DO NOT EDIT.
// referenced https://github.com/vektah/dataloaden/blob/master/pkg/generator/template.go
package {{.Package}}

import (
	"sync"
	"time"

{{- if or .KeyImport .ValueImport }}
{{ end }}

{{- with .KeyImport}}
	pkg1 "{{.}}"
{{- end }}

{{- with .ValueImport }}
	pkg2 "{{.}}"
{{- end }}
)

type {{.Name|lowerFirst}}Batch struct {
	keys    []{{ $key }}
	data    []{{ $value }}
	error   []error
	closing bool
	done    chan struct{}
}

// {{.Name}} batches and caches requests          
type {{.Name}} struct {
	// this method provides the data for the loader
	fetch func(keys []{{ $key }}) ([]{{ $value }}, []error)

	// how long to done before sending a batch
	wait time.Duration

	// this will limit the maximum number of keys to send in one batch, 0 = no limit
	maxBatch int

	// INTERNAL

	// lazily created cache
	cache map[{{ $key }}]{{ $value }}

	// the current batch. keys will continue to be collected until timeout is hit,
	// then everything will be sent to the fetch method and out to the listeners
	batch *{{.Name|lowerFirst}}Batch

	// mutex to prevent races
	mu sync.Mutex
}

// Load a {{.Value}} by key, batching and caching will be applied automatically
func (l *{{.Name}}) Load(key {{ $key }}) ({{ $value }}, error) {
	return l.LoadThunk(key)()
}

// LoadThunk returns a function that when called will block waiting for a {{.Value}}.
// This method should be used if you want one goroutine to make requests to many
// different data loaders without blocking until the thunk is called.
func (l *{{.Name}}) LoadThunk(key {{ $key }}) func() ({{ $value }}, error) {
	l.mu.Lock()
	defer l.mu.Unlock()

	if it, ok := l.cache[key]; ok {
		return func() ({{ $value }}, error) {
			return it, nil
		}
	}
	if l.batch == nil {
		l.batch = &{{.Name|lowerFirst}}Batch{done: make(chan struct{})}
	}
	batch := l.batch
	pos := batch.keyIndex(l, key)

	return func() ({{ $value }}, error) {
		<-batch.done

		var data {{ $value }}
		if pos < len(batch.data) {
			data = batch.data[pos]
		}

		var err error
		// its convenient to be able to return a single error for everything
		if len(batch.error) == 1 {
			err = batch.error[0]
		} else if batch.error != nil {
			err = batch.error[pos]
		}

		if err == nil {
			l.mu.Lock()
			l.unsafeSet(key, data)
			l.mu.Unlock()
		}

		return data, err
	}
}

// LoadAll fetches many keys at once. It will be broken into appropriate sized
// sub batches depending on how the loader is configured
func (l *{{.Name}}) LoadAll(keys []{{ $key }}) ([]{{ $value }}, []error) {
	results := make([]func() ({{ $value }}, error), len(keys))

	for i, key := range keys {
		results[i] = l.LoadThunk(key)
	}

	ret := make([]{{ $value }}, len(keys))
	errors := make([]error, len(keys))
	for i, thunk := range results {
		ret[i], errors[i] = thunk()
	}
	return ret, errors
}

// LoadAllThunk returns a function that when called will block waiting for many {{$value}}.
// This method should be used if you want one goroutine to make requests to many
// different data loaders without blocking until the thunk is called.
func (l *{{.Name}}) LoadAllThunk(keys []{{ $key }}) func() ([]{{ $value }}, []error) {
	results := make([]func() ({{ $value }}, error), len(keys))
	for i, key := range keys {
		results[i] = l.LoadThunk(key)
	}
	return func() ([]{{ $value }}, []error) {
		ret := make([]{{ $value }}, len(keys))
		errors := make([]error, len(keys))
		for i, thunk := range results {
			ret[i], errors[i] = thunk()
		}
		return ret, errors
	}
}

// Set the cache with the provided key and value.
// It is the caller's responsibility to avoid pass same pointer from a loop.
func (l *{{.Name}}) Set(key {{ $key }}, value {{ $value }}) {
	l.mu.Lock()
	defer l.mu.Unlock()

	l.unsafeSet(key, value)
}

// Prime the cache with the provided key and value. If the key already exists, no change is made
// and false is returned.
// It is the caller's responsibility to avoid pass same pointer from a loop.
// (To forcefully prime the cache, use Set.)
func (l *{{.Name}}) Prime(key {{ $key }}, value {{ $value }}) bool {
	l.mu.Lock()
	defer l.mu.Unlock()

	var found bool
	if _, found = l.cache[key]; !found {
		l.unsafeSet(key, value)
	}
	
	return !found
}

// Clear the value at key from the cache, if it exists
func (l *{{.Name}}) Clear(key {{ $key }}) {
	l.mu.Lock()
	defer l.mu.Unlock()

	delete(l.cache, key)
}

func (l *{{.Name}}) unsafeSet(key {{ $key }}, value {{ $value }}) {
	if l.cache == nil {
		l.cache = map[{{ $key }}]{{ $value }}{}
	}
	l.cache[key] = value
}

// keyIndex will return the location of the key in the batch, if its not found
// it will add the key to the batch
func (b *{{.Name|lowerFirst}}Batch) keyIndex(l *{{.Name}}, key {{ $key }}) int {
	for i, existingKey := range b.keys {
		if key == existingKey {
			return i
		}
	}

	pos := len(b.keys)
	b.keys = append(b.keys, key)
	if pos == 0 {
		go b.startTimer(l)
	}

	if l.maxBatch != 0 && pos >= l.maxBatch-1 {
		if !b.closing {
			b.closing = true
			l.batch = nil
			go b.end(l)
		}
	}

	return pos
}

func (b *{{.Name|lowerFirst}}Batch) startTimer(l *{{.Name}}) {
	time.Sleep(l.wait)
	l.mu.Lock()
	defer l.mu.Unlock()

	// we must have hit a batch limit and are already finalizing this batch
	if b.closing {
		return
	}

	l.batch = nil
	b.end(l)
}

func (b *{{.Name|lowerFirst}}Batch) end(l *{{.Name}}) {
	b.data, b.error = l.fetch(b.keys)
	close(b.done)
}
