{{- /*
Accept data:
    Type: type without import path, can be slice or pointer.
*/ -}}

{{- if hasPrefix "*" .Type -}}
	{{- $_ := set . "IsPtr" "true" -}}
	{{- $_ := set . "ValueType" (substr 1 -1 .Type) -}}
{{- else if .IsInterface -}}
	{{- $_ := set . "ValueType" .Type -}}
{{- else -}}
	{{- $_ := set . "ValueType" .Type -}}
{{- end -}}

// Code generated from signal.go.gotmpl, DO NOT EDIT.

package {{.Package}}

import (
	"sync"
	"context"
)

// Signal that emit {{.Type}} to receivers.
type Signal struct {
	mu sync.RWMutex
	m map[chan<- {{ .ValueType }}]bool
	sideEffects []func(context.Context, {{.Type}}) error
}

// Emit send object to every receivers. error when hook function errors.
func (s *Signal) Emit(ctx context.Context, o {{ .Type }}) error {
	s.mu.RLock()
    defer s.mu.RUnlock()

	for _, fn := range s.sideEffects {
		err := fn(ctx, o)
		if err != nil {
			return err
		}
	}

{{ if .IsPtr }}
	v := *o
{{- else }}
	v := o
{{- end }}
	for c, block := range s.m {
		if block {
			select {
			case c <- v:
			case <- ctx.Done():
				return ctx.Err()
			}
		} else {
			select {
			case c <- v:
			case <- ctx.Done():
				return ctx.Err()
			default:
			}
		}
	}

	return nil
}

func (s *Signal) addReceiver(c chan<- {{ .ValueType }}, block bool) {
	s.mu.Lock()
    defer s.mu.Unlock()

	if s.m == nil {
		s.m = make(map[chan<- {{ .ValueType }}]bool)
	}
	s.m[c] = block
}

// Notify add channel to receivers. Emit will wait when channel is blocked.
// It is the caller's responsibility to Stop notify before channel close.
func (s *Signal) Notify(c chan<- {{ .ValueType }}) {
	s.addReceiver(c, true)
}

// TryNotify add channel to receivers. Emit will skip when channel is blocked.
// It is the caller's responsibility to Stop notify before channel close.
func (s *Signal) TryNotify(c chan<- {{ .ValueType }}) {
	s.addReceiver(c, false)
}

// Stop remove channel from receivers.
func (s *Signal) Stop(c chan<- {{ .ValueType }}) {
	s.mu.Lock()
    defer s.mu.Unlock()

	delete(s.m, c)
}

// Connect a side effect function to signal.
// it will be called before send each object to channels.
func (s *Signal) Connect(fn func(context.Context, {{.Type}}) error) {
	s.mu.Lock()
    defer s.mu.Unlock()

	s.sideEffects = append(s.sideEffects, fn)
}
